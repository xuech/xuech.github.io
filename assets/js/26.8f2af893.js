(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{517:function(e,v,_){e.exports=_.p+"assets/img/1.fc4001f2.png"},581:function(e,v,_){"use strict";_.r(v);var t=_(6),n=Object(t.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("img",{attrs:{src:_(517),alt:"1"}})]),e._v(" "),t("h2",{attrs:{id:"webpack构建流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack构建流程"}},[e._v("#")]),e._v(" Webpack构建流程")]),e._v(" "),t("ul",[t("li",[e._v("根据配置，从Entry开始，递归解析Entry依赖的所有Module，每找到一个Module，就会根据Module.rules里配置的Loader规则进行相应的转换处理；")]),e._v(" "),t("li",[e._v("对Module进行转换后，这些Module会以Entry为单位进行分组，即为一个Chunk。因此一个Chunk，就是一个Entry及其所有依赖的Module合并的结果。")]),e._v(" "),t("li",[e._v("在整个构建流程中，Webpack会在恰当的时机执行Plugin里定义的逻辑，从而完成Plugin插件的优化任务。")]),e._v(" "),t("li",[e._v("将所有的Chunk转换成文件输出Output。")])]),e._v(" "),t("ol",[t("li",[e._v("初始化参数\n解析配置参数，合并"),t("code",[e._v("vue.config.js")]),e._v("文件配置的参数，得到最后配置结果")]),e._v(" "),t("li",[e._v("开始编译\n将得到的参数初始化为"),t("code",[e._v("compiler")]),e._v("对象，注册"),t("code",[e._v("Plugin")]),e._v("，插件监听"),t("code",[e._v("Webpack")]),e._v("构建生命周期的事件节点,执行对象的 run 方法开始执行编译")]),e._v(" "),t("li",[e._v("确定入口\n从"),t("code",[e._v("entry")]),e._v("开始解析文件构建"),t("code",[e._v("AST")]),e._v("语法树，找出依赖，递归遍历")]),e._v(" "),t("li",[e._v("编译模块\n递归中根据文件类型和"),t("code",[e._v("loader")]),e._v("配置，调用所有配置的"),t("code",[e._v("loader")]),e._v("对文件进行转换，再找出该模块依赖的模块")]),e._v(" "),t("li",[e._v("完成模块编译并输出\n递归完后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据 "),t("code",[e._v("entry")]),e._v(" 配置生成代码块 "),t("code",[e._v("chunk")]),e._v(" 。")]),e._v(" "),t("li",[e._v("输出完成\n将所有的"),t("code",[e._v("chunk")]),e._v("转换成文件输出到"),t("code",[e._v("output")])])])])}),[],!1,null,null,null);v.default=n.exports}}]);