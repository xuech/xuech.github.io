(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{570:function(t,e,a){"use strict";a.r(e);var s=a(6),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844904100195205133#heading-10",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event Loop"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"为什么说-dom-操作耗时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么说-dom-操作耗时"}},[t._v("#")]),t._v(" 为什么说 DOM 操作耗时")]),t._v(" "),a("p",[t._v("浏览器包含渲染引擎（也称浏览器内核）和 "),a("code",[t._v("JavaScript")]),t._v(" 引擎，它们都是单线程运行。单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况让这两个引擎具有互斥性。操作系统在进行线程切换的时需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息（上下文切换），而这个操作相对是比较耗时的。\n每次DOM操作就会引发线程的上下文切换（从公js引擎切换到渲染引擎然后再切换回js引擎），这就是性能损耗。")]),t._v(" "),a("h2",{attrs:{id:"什么是nexttick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是nexttick"}},[t._v("#")]),t._v(" 什么是nextTick")]),t._v(" "),a("p",[t._v("看下面这个场景：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新dom")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果把这段代码放在主线程中那么DOM就会更新1000次，有没有一个方法只让DOM更新一次得到最后想到的效果呢？vue的"),a("code",[t._v("nextTick")]),t._v("就是用来解决这个问题的")]),t._v(" "),a("blockquote",[a("p",[t._v("Vue 是"),a("strong",[t._v("异步更新 DOM")]),t._v("。每当数据变化时，就开启一个队列，将同一事件循环内所有的数据变化缓存起来。如果同一个 "),a("code",[t._v("watcher")]),t._v(" 被多次触发，只会被推入到队列中一次，同时去除重复数据，避免不必要的计算和 DOM 操作。所以更改了data的数据，DOM 不会立即更新，而是在下一次事件循环清空队列时更新。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果是同步操作的话，那么改一次数据渲染一次页面（组件），但是我们只需要最后一次修改的结果中间的改动我们不关心，所以Vue采用了异步更新DOM，引入队列存储同一个watcher的所有data属性变化，最后统一调用nextTick方法进行更新渲染（只调一次）")])]),t._v(" "),a("h2",{attrs:{id:"nexttick原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick原理"}},[t._v("#")]),t._v(" nextTick原理")]),t._v(" "),a("ul",[a("li",[t._v("vue用异步队列的方式来控制DOM更新和nextTick回调先后执行")]),t._v(" "),a("li",[t._v("微任务优先级比宏任务高，能确保队列中的微任务在下一次事件循环前被执行完毕")]),t._v(" "),a("li",[t._v("出于兼容性考虑vue做了微任务向宏任务降级的方案。")])]),t._v(" "),a("h2",{attrs:{id:"为什么不用settimeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用settimeout"}},[t._v("#")]),t._v(" 为什么不用"),a("code",[t._v("setTimeout")])]),t._v(" "),a("ul",[a("li",[a("s",[a("code",[t._v("nextTick")]),t._v("是微任务，而"),a("code",[t._v("setTimeout")]),t._v("是宏任务")])]),t._v(" "),a("li",[a("s",[t._v("微任务优先级高于宏任务")])]),t._v(" "),a("li",[t._v("实际上vue内部根据浏览器的支持程度做了降级策略，优先使用"),a("code",[t._v("promise")]),t._v("，实在不行最后使用"),a("code",[t._v("setTimeout")]),t._v("\n详细文章的解析参考："),a("RouterLink",{attrs:{to:"/guide/js/9.html"}},[t._v("JS运行机制")])],1)]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("ul",[a("li",[t._v("在created 生命周期执行DOM操作，一般放在"),a("code",[t._v("mounted()")]),t._v("函数中")]),t._v(" "),a("li",[t._v("在数据变化后需要进行基于DOM结构的操作")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844904169967452174",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);